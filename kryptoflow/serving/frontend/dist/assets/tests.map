{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","frontend/tests/app.lint-test.js","frontend/tests/helpers/ember-keyboard/register-test-helpers.js","frontend/tests/integration/components/websocket-client-test.js","frontend/tests/test-helper.js","frontend/tests/tests.lint-test.js","frontend/tests/unit/adapters/historic-test.js","frontend/tests/unit/controllers/high-charts-test.js","frontend/tests/unit/controllers/historical-test.js","frontend/tests/unit/models/historical-test.js","frontend/tests/unit/routes/about-test.js","frontend/tests/unit/routes/charts-test.js","frontend/tests/unit/routes/contact-test.js","frontend/tests/unit/routes/index-test.js","frontend/tests/unit/services/dynamic-chart-test.js","frontend/tests/unit/services/websocket-client-test.js","frontend/tests/units/charts/gdax-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('frontend/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/chart-highstock-interactive.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/chart-highstock-interactive.js should pass ESLint\\n\\n5:8 - \\'EmberHighChartsComponent\\' is defined but never used. (no-unused-vars)\\n11:9 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n13:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n24:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n27:5 - Unexpected console statement. (no-console)\\n53:68 - \\'stockData\\' is not defined. (no-undef)\\n54:7 - Unexpected console statement. (no-console)\\n59:69 - \\'stockData\\' is not defined. (no-undef)\\n67:9 - Unexpected console statement. (no-console)\\n68:9 - Unexpected console statement. (no-console)\\n80:9 - Unexpected console statement. (no-console)\\n81:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/websocket-client.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/websocket-client.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/chart-highstock-interactive.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/chart-highstock-interactive.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/about.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/about.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/charts.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/charts.js should pass ESLint\\n\\n2:10 - \\'copy\\' is defined but never used. (no-unused-vars)\\n3:20 - \\'service\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/contact.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/dynamic-chart.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/dynamic-chart.js should pass ESLint\\n\\n27:5 - Unexpected console statement. (no-console)');\n  });\n});","define('frontend/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember-keyboard'], function (exports, _emberKeyboard) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function () {\n    Ember.Test.registerAsyncHelper('keyDown', function (app, attributes) {\n      return keyEvent(app, attributes, 'keydown');\n    });\n\n    Ember.Test.registerAsyncHelper('keyUp', function (app, attributes) {\n      return keyEvent(app, attributes, 'keyup');\n    });\n\n    Ember.Test.registerAsyncHelper('keyPress', function (app, attributes) {\n      return keyEvent(app, attributes, 'keypress');\n    });\n  };\n\n  const keyEvent = function keyEvent(app, attributes, type) {\n    const event = attributes.split('+').reduce((event, attribute) => {\n      if (['ctrl', 'meta', 'alt', 'shift'].indexOf(attribute) > -1) {\n        event[`${attribute}Key`] = true;\n      } else {\n        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);\n      }\n\n      return event;\n    }, {});\n\n    return app.testHelpers.triggerEvent(document, type, event);\n  };\n});","define('frontend/tests/integration/components/websocket-client-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | websocket-client', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Y4V3T4Hl\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"websocket-client\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"CnRxbC6n\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"websocket-client\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('frontend/tests/test-helper', ['frontend/app', 'frontend/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('frontend/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('integration/components/websocket-client-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/websocket-client-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/historic-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/historic-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/high-charts-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/high-charts-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/historical-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/historical-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/historical-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/historical-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/about-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/charts-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/charts-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/contact-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/contact-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/dynamic-chart-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/dynamic-chart-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/websocket-client-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/websocket-client-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('units/charts/gdax-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'units/charts/gdax-test.js should pass ESLint\\n\\n');\n  });\n});","define('frontend/tests/unit/adapters/historic-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Adapter | historic', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:historic');\n      assert.ok(adapter);\n    });\n  });\n});","define('frontend/tests/unit/controllers/high-charts-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | high-charts', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:high-charts');\n      assert.ok(controller);\n    });\n  });\n});","define('frontend/tests/unit/controllers/historical-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | historical', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:historical');\n      assert.ok(controller);\n    });\n  });\n});","define('frontend/tests/unit/models/historical-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | historical', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('historical', {}));\n      assert.ok(model);\n    });\n  });\n});","define('frontend/tests/unit/routes/about-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | about', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:about');\n      assert.ok(route);\n    });\n  });\n});","define('frontend/tests/unit/routes/charts-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | charts', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:charts');\n      assert.ok(route);\n    });\n  });\n});","define('frontend/tests/unit/routes/contact-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | contact', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:contact');\n      assert.ok(route);\n    });\n  });\n});","define('frontend/tests/unit/routes/index-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define('frontend/tests/unit/services/dynamic-chart-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | dynamic-chart', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:dynamic-chart');\n      assert.ok(service);\n    });\n  });\n});","define('frontend/tests/unit/services/websocket-client-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | websocket-client', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:websocket-client');\n      assert.ok(service);\n    });\n  });\n});","define('frontend/tests/units/charts/gdax-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('gdax', 'gdax', {\n    needs: ['component:high-charts']\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // creates the component instance\n    let component = this.subject();\n    assert.equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.render(assert);\n    assert.equal(component._state, 'inDOM');\n  });\n});","define('frontend/config/environment', [], function() {\n  var prefix = 'frontend';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}